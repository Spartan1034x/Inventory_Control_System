using BullseyeDesktopApp.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Timers;
using Timer = System.Windows.Forms.Timer;


namespace BullseyeDesktopApp.StaticHelpers
{
    public static class DBOperations
    {

        //       FIND SELECTED EMPLOYEE
        //
        //
        // Receives id searches for matching employee, returns empty employee if not found
        public static Employee FindEmployeeByID(int id)
        {
            try
            {
                using (var context = new BullseyeContext())
                {
                    Employee employee = context.Employees.FirstOrDefault(x => x.EmployeeId == id) ?? new Employee();
                    return employee;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "DB Error");
                return new Employee();
            }
        }
        //
        // Receives username searches for matching employee, returns empty employee if not found
        public static Employee FindEmployeeByUsername(string username)
        {
            try
            {
                using (var context = new BullseyeContext())
                {
                    Employee employee = context.Employees
                                        .Include(e => e.Position) // Loads position as well
                                        .FirstOrDefault(x => x.Username == username) ?? new Employee();
                    return employee;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "DB Error");
                return new Employee();
            }
        }


        //                    TRANSACTION WITH AUDIT
        //
        //
        // SENT: NEW TXN, TXNITEM LIST, ADDITIONAL NOTES
        // RETURNED: STRING ex message or "ok"
        // Receives a txn and notes and submits that along with the audit record to the db, returns true if db ops successful
        public async static Task<string> TransactionWithAudit(Txn newTransaction, List<Txnitem> items, string notes)
        {

            using (var context = new BullseyeContext())
            {
                using (var dbTransaction = context.Database.BeginTransaction())
                {
                    try
                    {   // Add new transaction and save changes so ID of txn can be autogenerated
                        context.Txns.Add(newTransaction);
                        await context.SaveChangesAsync();

                        // Add TXN id to each txnItem then add to txnItems db
                        foreach (Txnitem item in items) 
                        {
                            item.TxnId = newTransaction.TxnId;
                            context.Txnitems.Add(item);
                        }


                        var audit = new Txnaudit
                        {
                            CreatedDate = DateTime.UtcNow,
                            TxnId = newTransaction.TxnId, //ID from db
                            EmployeeId = newTransaction.EmployeeId,
                            TxnType = newTransaction.TxnType,
                            Status = newTransaction.TxnStatus,
                            TxnDate = newTransaction.ShipDate,
                            SiteId = newTransaction.SiteIdfrom,
                            DeliveryId = newTransaction.DeliveryId,
                            Notes = "Txn Notes: " + newTransaction.Notes + "\nAudit Notes: " + notes
                        };

                        context.Txnaudits.Add(audit); 
                        await context.SaveChangesAsync(); // Save txnAudit 

                        await dbTransaction.CommitAsync(); // Commit database transaction

                        return "ok";
                    }
                    catch (Exception ex)
                    {
                        await dbTransaction.RollbackAsync(); // Rollback if database transaction fails
                        //throw new Exception(ex.Message);
                        return ex.Message + "\nInner Error: " + ex.InnerException;
                    }
                }
            }
            
        }


        //                CAN SUBMIT STORE ORDER
        //
        //
        public static bool CanSubmitOrder(int storeID)
        {
            try
            {
                using (var context = new BullseyeContext())
                {
                    // Gets current date and subracts however many days since sunday to get start of current week (Sunday)
                    var startOfCurrentWeek = DateTime.UtcNow.Date.AddDays(-(int)DateTime.UtcNow.DayOfWeek);

                    // Searches if a site has placed an order after the current sunday so this week already, returns true if one has been placed then ! returns false (Cannot another submit order)
                    return !context.Txns.Any(o => o.SiteIdto == storeID && o.CreatedDate >= startOfCurrentWeek && o.EmergencyDelivery == 0);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "DB Error");
                return true;
            }    
        }


        //              ORDER NOTIFICATION
        //
        //
        private static System.Windows.Forms.Timer orderTimer = new();
        private static DateTime lastChecked = DateTime.Now;

        //
        // Starts and sets timer to check for new orders every 5 min to reduce db queries
        public static void StartOrderNotificationTimer()
        {
            orderTimer.Interval = (int)TimeSpan.FromMinutes(5).TotalMilliseconds;
            orderTimer.Tick += CheckForNewOrders;
            orderTimer.Start();
        }

        //
        // Stops timer, called when main form closes
        public static void StopOrderTimer()
        {
            orderTimer.Stop();
        }

        //
        // Querys the database to find Submitted orders that are between last checked time and now, notfies if any ordrs have been placed
        private static void CheckForNewOrders(object sender, EventArgs e)
        {
            try
            {
                using (var context = new BullseyeContext())
                {
                    List<Txn> newTxns = context.Txns.Where(t => t.TxnStatus.ToUpper() == "SUBMITTED" && t.CreatedDate > lastChecked).ToList();

                    // If any new orders have been submitted then display a messagebox and reset checked time
                    if (newTxns.Count > 0)
                    {
                        MessageBox.Show($"{newTxns.Count} new order have been placed", "New Orders", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        lastChecked = DateTime.Now;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "DB Error");
            }
        }
    }
}
