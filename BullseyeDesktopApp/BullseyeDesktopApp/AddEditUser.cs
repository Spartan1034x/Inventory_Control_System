using BullseyeDesktopApp.Models;
using MySqlConnector;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace BullseyeDesktopApp
{
    public partial class AddEditUser : Form
    {
        private bool add;
        const string txtMessage = "Automatically Generated";

        public AddEditUser(bool add)
        {
            InitializeComponent();
            this.add = add;
        }

        private void AddEditUser_Load(object sender, EventArgs e)
        {
            PopulateLabels();
            PopulateCombos();
            txtFName.KeyPress += NameTextboxHandler; //Subscribes event to event handler verification method
            txtLName.KeyPress += NameTextboxHandler;

            this.Text = add ? "Bullseye IMS - Add New Employee" : "Bullseye IMS - Edit Employee";

            //Disabled autogenerated fields and disable chkbox if ADD
            txtPassword.Enabled = !add;

            // Populates message to txts
            if (add)
            {
                txtID.Text = "Auto Generated";
                txtEmail.Text = txtMessage;
                txtPassword.Text = txtMessage;
                txtUsername.Text = txtMessage;
            }
            else if (StaticHelpers.UserSession.SelectedUser != null)
            {
                chkLocked.Enabled = true;
                Employee cu = StaticHelpers.UserSession.SelectedUser;
                txtID.Text = cu.EmployeeId.ToString();
                txtUsername.Text = cu.Username;
                txtPassword.PlaceholderText = "*************";
                txtFName.Text = cu.FirstName;
                txtLName.Text = cu.LastName;
                txtEmail.Text = cu.Email;
                chkActive.Checked = cu.Active == 1;
                chkLocked.Checked = cu.Locked == 1;

                //Matches position, 
                cmbPosition.SelectedItem = cmbPosition.Items
                    .Cast<Posn>() // Casts cmb items to Posn objects for matching
                    .FirstOrDefault(pos => pos.PositionId == cu.PositionId); // Finds match of IDs for cmb and current user

                //Matches location
                cmbLocation.SelectedItem = cmbLocation.Items
                    .Cast<Site>()
                    .FirstOrDefault(loc => loc.SiteId == cu.SiteId);
            }
            else
                MessageBox.Show("No user selected", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }


        //           POPULATE LABELS + COMBOBOXES
        //
        // Populates labels with user data from static class
        private void PopulateLabels()
        {
            lblUser.Text = StaticHelpers.UserSession.CurrentUser?.Username ?? ""; //If null empty string
            lblUser.ForeColor = Color.Red;

            lblLocation.Text = StaticHelpers.UserSession.UserLocation ?? "";
            lblLocation.ForeColor = Color.Red;

        }
        //
        // Populates combo boxes with data from db
        private void PopulateCombos()
        {
            try
            {
                using (var context = new BullseyeContext())
                {
                    context.Sites.ToList().ForEach(loc => cmbLocation.Items.Add(loc));
                    context.Posns.ToList().ForEach(pos => cmbPosition.Items.Add(pos));
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "DB Error");
            }
        }


        //        EXIT BUTTON
        //           
        private void btnExit_Click(object sender, EventArgs e)
        {
            this.Close();
        }


        //        SAVE BUTTON
        //
        //
        private void btnSave_Click(object sender, EventArgs e)
        {
            string firstName = txtFName.Text.Trim();
            string lastName = txtLName.Text.Trim();
            //Validates first and last names
            if (string.IsNullOrEmpty(firstName) || string.IsNullOrEmpty(lastName))
            {
                MessageBox.Show("First name and last name cannot be empty.", "Input Error",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            //Validates valid items are selected in both cmbs
            if (!(cmbPosition.SelectedItem is Posn) || !(cmbLocation.SelectedItem is Site))
            {
                MessageBox.Show("Please select a valid position and location.", "Input Error",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            //Makes db to add user if inputs are good
            try
            {
                using (var context = new BullseyeContext())
                {
                    if (add) //    ADD
                    {
                        Posn position = (Posn)cmbPosition.SelectedItem;
                        Site location = (Site)cmbLocation.SelectedItem;
                        Employee newUser = new Employee();
                        newUser.FirstName = CapitolizeName(firstName);
                        newUser.LastName = CapitolizeName(lastName);
                        newUser.PositionId = position.PositionId;
                        newUser.SiteId = location.SiteId;
                        newUser.Active = 1;
                        newUser.Password = StaticHelpers.PasswordHelper.HashPassword("P@ssw0rd-");

                        context.Employees.Add(newUser);
                        context.SaveChanges();
                        ClearInputs();
                    }
                    else //    EDIT
                    {
                        if (StaticHelpers.UserSession.SelectedUser != null) //Ensure selected user is not null
                        {
                            //Variable for easier coding
                            Employee updatedUser = StaticHelpers.UserSession.SelectedUser;

                            //Attach user in static class to context for updating
                            context.Employees.Attach(updatedUser);

                            //If password has been changed and it meets requirments update employee
                            if (!string.IsNullOrWhiteSpace(txtPassword.Text)) //Checks password field is not empty
                            {
                                if (StaticHelpers.PasswordHelper.VerifyPasswordRequirements(txtPassword.Text)) //Checks password requirements
                                    updatedUser.Password = StaticHelpers.PasswordHelper.HashPassword(txtPassword.Text);
                                else
                                {
                                    MessageBox.Show("Password must be 8 characters long, with 1 non-numeric, 1 capital letter, and 1 number.",
                                        "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                    return; //Stops update if the password is invalid
                                }
                            }

                            // Changes from user inputs
                            Posn position = (Posn)cmbPosition.SelectedItem;
                            Site location = (Site)cmbLocation.SelectedItem;
                            updatedUser.SiteId = location.SiteId;
                            updatedUser.PositionId = position.PositionId;
                            updatedUser.Active = (sbyte)(chkActive.Checked ? 1 : 0);
                            updatedUser.Locked = (sbyte)(chkLocked.Checked ? 1 : 0);
                            updatedUser.FirstName = CapitolizeName(firstName);
                            updatedUser.LastName = CapitolizeName(lastName);

                            context.SaveChanges();
                            //MessageBox.Show("User updated!", "Success", MessageBoxButtons.OK);
                            
                            this.Close(); // Closes form on successful Save
                        }


                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "DB Error");
            }
        }
        //
        // Returns the name with first letter capitol
        private string CapitolizeName(string name)
        {
            if (string.IsNullOrWhiteSpace(name))
                return name;

            return char.ToUpper(name[0]) + name.Substring(1).ToLower();
        }
        //
        //Clears inputs and shows message saying user added
        private void ClearInputs()
        {
            cmbPosition.SelectedIndex = -1;
            cmbLocation.SelectedIndex = -1;
            foreach (Control ctrl in this.Controls)
            {
                if (ctrl is TextBox txtBox)
                    txtBox.Clear();
            }
            MessageBox.Show("User added to DB", "Success", MessageBoxButtons.OK);
        }


        //       EDITING USERNAME + EMAIL REAL TIME UPDATES
        //
        //
        // Populates email and username txtboxes when editing
        private void PopulateWhileEditing()
        {
            string firstInitial = txtFName.Text.Substring(0,1).ToLower();
            string lastName = txtLName.Text.ToLower();

            txtUsername.Text = firstInitial + lastName;
            txtEmail.Text = firstInitial + lastName + "@bullseye.ca";
        }
        private void txtFName_TextChanged(object sender, EventArgs e)
        {
            if (txtFName.Text.Length == 1) {
                PopulateWhileEditing();
            }
        }
        private void txtLName_TextChanged(object sender, EventArgs e)
        {
            PopulateWhileEditing();
        }


        //       REAL TIME VALIDATION ON FNAME AND LNAME TEXTBOXES
        //
        //
        //Event handler that only allows control keys, letter keys and Hiphons
        private void NameTextboxHandler(object? sender, KeyPressEventArgs e)
        {
            if (!char.IsLetter(e.KeyChar) && e.KeyChar != '-' && !char.IsControl(e.KeyChar))
            {
                e.Handled = true;
            }
        }


        //         FORM CLOSING
        //
        //      Wipes selected user
        private void AddEditUser_FormClosing(object sender, FormClosingEventArgs e)
        {
            StaticHelpers.UserSession.SelectedUser = new Employee();
        }

    }
}
